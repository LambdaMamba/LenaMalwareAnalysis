#Python script by Lena (aka LambdaMamba) for decrypting and decoding PrivateLoader's HTTP requests and responses

from base64 import b64decode, b64encode
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes, hmac
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

def lena_privateloader_decrypt_http(base64_data):
    # Replace the characters '_' with '/' and '-' with '+'
    base64_data = base64_data.replace('_', '/').replace('-', '+')

    # Decode the data
    decoded_data = b64decode(base64_data)

    # Extract salt, IV, encrypted data, and HMAC hash
    salt = decoded_data[:16]
    iv = decoded_data[16:32]
    hmac_hash = decoded_data[-32:]
    encrypted_data = decoded_data[32:-32]

    # Password and parameters
    password = "Snowman+under_a_sn0wdrift_forgot_the_Snow_Maiden".encode()
    iterations = 20000

    # Create a PBKDF2HMAC object for the key derivation
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA512(),
        length=64,  # 32 bytes for AES key, 32 bytes for HMAC key
        salt=salt,
        iterations=iterations,
        backend=default_backend()
    )

    # Derive the key
    key = kdf.derive(password)
    aes_key = key[:32]
    hmac_key = key[32:]

    # Validate HMAC
    h = hmac.HMAC(hmac_key, hashes.SHA512(), backend=default_backend())
    h.update(decoded_data[16:-32])  # Update it with the data part used in HMAC

    # Decrypt the data
    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted_data = decryptor.update(encrypted_data) + decryptor.finalize()

    # Return the decrypted data
    return decrypted_data

# Example strings from the CrackedCantil https://any.run/cybersecurity-blog/crackedcantil-breakdown
base64_strings = [
    "Q0uWGgHyOK1yWQK-BXHkM-HySJVrM-bkDRjaZRMVle11OCvYaPf2WzR9nGuLpCPzAv8ibLyhynT0DqT5CPejzN_j4vkuL4Rmafqdqg7q29RNzn9VOTArbMt6Jrq5lsZ3",
    "FaU4dkFGmFsWKWHjsIyHND/UQ4teC8N/iQvaDo7KdzhN7A+UPiuqSmRylwEY4xK8esn2u4T6CpBh383VqxiDRRD+bfa76QQLfTJpwLFlS0A=",
    "2nz0hsO9K7vKyuyl6qoOl_sXwxXEb9wuclyy-ls5CzmbHEQUW2WHIvG9MpPOFBnZnyJoLVAtEzHhAskeKO0zSvR_r5qNNZLcYZ4xP0XllMrOnoKZhvdXZdNamZiesubb",
    "Letw5AloRfH5EJy3QRIcouZs/qYLXwRoR4PZbQFQhN2Nd8yTbZcYDGzOtHApGfTFR1Tv9sqJLktOf6fjaLz85hacrC9ogc+Cj5cGTClMhiSmZqsjYIZG24MpA5tO26+5SmY55Yq81lYUTmH6s7JYdFYF9r0fRrPK7LLclJH9gK5CAkCdb3CPA1lbYS+8na5lwwxIycamdM2IRNvXPZ2+DzkgiG39ur9gScryB85Y2BHjrxVGUGWkjrP18sb3THXaZdBZ9dug3a1+9kgKbWL/2SzTQ6GlhTNpHLZ5ZS+Fe/j+nYdFylDWjNjgG4TFLqoGYYMhNT5Aby4X+IzYQWmJGDkP03ThlWoExZ0Pcx0PibBiDwp0o9+2yTRNv/KiWGDnIXbNZOxaVn+S3b/HXZFu2pqSw3ca6lRoCOhMOjJwNUKjUwdMUFCTP3clECdsaL2ZAyu9f0U7p8cT/bWMrH+evubWOBo3jSG/YWLHwW4My70+O9xU0rxQz39GQbaCJixql1+2Kb2Y6HGWJiQ+gAtpMnVocYIo8l93HNvhkjl0cKrBc6CCXVYEA8eBiFBDSx8FaQkbs4x/dSyp+QTCSJ9h4bpEmTp2KmSNScaL+oStiNWYxUrcz+nN3H6d0P7nLSEI8evXb0L5r/6ieVzv2hp/rpKLFpwh7SHIcH7HN57lpZBJkDXBsmz2sr8Y4jGNy3X8R3YfYeqGhfd1pBtqt5AeFQtJvqCsiWoiaQ1yFloiQjtantrbTdWtYiNu3CUXSxTAUYJ8HFSFGeYAtWsSIEBteTKVB+9JzgN0tP8jZnFjdcE5CfejOJOguJSO/Jd1RdpHYP/mOvq+AzS6XXygbA/n5GdqjnjDCOH2eULJl9dZLH1FRO8EDl3h3l2wg6YR1onoKfubqRb+RKf+a3nSe5QMG2CiaQ/HY+SLK8V5dJiHiJqjAeE8beQGWuu7DWa+BkusKbuiQd3OcgctpxRWnqpMQasZ6WlSFiWFZf0cRiHQCcSKuQEvn8aBf5e4ui+e4UBOIxBnpX9IcRXtcfwwekwCpgKZo0G9yPJ/X9RTsmlBLi2JDnK7qG8aXYpIoeYI0jNz69x6+mg4PRSWckrM/s2JHGR03ffT/NlZlefgp2GZvTJiLOJwb93RlWhkG0fp17lwgOd3XSNQccSmuV6+ou/rNvp2al4w72/ANhTVD9W5hbg8/EMvftRIE1+Elx41bNFw2JqVmyXM4C2AqsnO2qHRo0gBfmrLMd/Ab2EJbO5/pWL4f+OEUV6E2mILY1Zo20Tb2Ob5gKLiMN9qriZTmuIli+Xmm5+kZLLzvm7oiO3RPW/PKWh8HTxigwi5b9eHdGbLRpeHSsuEUSkKH1d/EVcgS8h+8BVSB2D5ihNBMYyBrONJo3CDGdxHF+MKpSHfTZYL88WLFelfb75V1I/bzA28Ex5Yv1L7ApJp+f/bxwBGLP7/JC84rvfTtFDcykjLT+KlTmNcBRWJXSTQvDHzAQZKin46WCk7RfMbyNdz0khP8v/nEzIZWJm6rH36ymaqG/WkHWvEPSzMV1YpiO3zrO3J3cr+xx+PFmRMz+r61GI4DgKWIxXAI6Ajz3SNJqigc4cntmUIUh1Y44seRD08zGyAybkE4yAYHD1OOrG5n4HrrQL8LqRvD6ga5COR3lucW7tKYNtVya7n3Jr86FEpD92awnLONvuHdzyTZ/D43u+16WECG2vjX/umFpzJGN534ons9361VUzie84PVIY0yN9bJK31yJTP/F/oFI0+7WOVve+bSZAC3bzpEXAjn9AFRBLoCD5cmTogKwqRqqbUFVTvBe6DNQyLUBQF3qXn/+k0QLyhXDHgAwekFwpTBL73+/eM4y1oqSoe2eG9T6BcLt76Fk2nb5/PHq4vNl4CMWJPmITC5h900m+GKiZL57PAcbBGILmMjHZnw56I4zlUsl9shM0XVRnTf9SNu1y+kz4GYTW3J8iwDMd+0Da0HVpE+bST273L4nIXbUEEAZmsDbnRomGychOucRvs0r9S3d5JfjMCTAVabu0VkDyvr7r5bDtqHPzxl31ONp+0iQL6oeCoiqE5PPh0hdBzCcGdu5QTUMQYSpDrB/iNkWJ7bMCwr/LwYuPIQj4DP0RFkT0mXzfM6oYQ8qyw/hW4242UtHktFVfUJzIziHY7yoOmHCeBBmJ5X7bfmeiTN8AJIvIfz9fF0fHBDLSHpwHSNAgpqvc4ev6nfGkmAl6KLUhjGtHntKW7lAsU5gnG0+CihBHNCnlOD9rwHQ+xCMYq3VXeF8iy6pWVfx2TD7a/p2vwtd0mtAO3gpvpepfCcdHM9AnYjkTZGR8YZ8boblFERSh92nVKoWHySUXIO9Gml1d4yiMkve7yFZJhJDXOwztYWX/EGDDIWyHHwVpI0Lrv0pdZJ528MMd1nISV84FopfusuM1bIHs+W4aES/QusWPRFzosXErB4lGUUS8B8Gdqzy/OUzzyo36k1fiOrBZi6BrEtFjtQ1dkDI1LLCtkWGkLREogqSq+eyQfNxry3O3NK6yiHAfo9JmhuDS2mdiPKaHzpIRwzMXnEk7cVbjJt0iLDdEXu4HKSkIi0VqOwKAQjlQLNK1a/6SASgPDOJpOv1qvzH3Y8xB1OrdpVL7GupOKmutcqpOP9FElb536XHiTLseux81C5ksDOltANQTKVjL+gpB3amqWQLbKd+S2Fpxsu+6a6NILOrJX72ATWoRncEc4ZyUMESH8ToiNDaeYaCQf7UOIQ74b9ZN194D6SbbB2gkD+S0tzb+RwydTj3XFwJyktCUMqhbYN49Nl4jZLJSFH6JgLsJtHYg0lvzbM/Acl+VpPupQlDaTHRUkzexjttbGE5MAUaM4+oKwN5udU76N8BDYaP6syqBb3m6Oze3jwb/bBO15Sg2xz5g8fKOCZOP6b43G2HGZG+gTre+pKGjEJ3H7JGzBwGWI6OnqDvxCt43XeZodNoYwHwW58Yq0PRcVUNFpIL7JlbzqU+ieE3L6nmxtiFwZe4UKpooki3xeuKLMJ2+157+kXYcdTcWcUUTLKiE/WIYidP7UGfOzEFVS+bH1voHxDJNls8kgRzg+NAde9hRgLyuSmvPX7bwLOXA9PRPNO5GvVPkg4U8Zrym0Vv6LvG/+YHQvkslgMaLC73+sUbGuoxKnUi61BHd0odmrfK7edqq4PBe9XbBtnO3mOBBLp2APiTUmhqh/leQqfesqdfuXVdSRKnevtb9AkAy3bSTYnNjryPrMuJM2XyfIxh1Fl78Um5TVDjjB7mEaz8apc+DofUcxy80YGDAKU3FQcYTJhrcYqjY5xo2773JPIGRPk6OODSKyNeLi7lxLOYn9XQ4VvZZKKawoAjSzYUFGSQpdA1z4IKD27C2AIAhq54gFwcFvI9jIAjJ+YIRo4etoV033rDgbV6e7bxZvn8WKdX0H+pDgA80YjvG8Q+QVo3e4R8HnPKj2coA3M28MWu3lC7sdtUj2zxjjhzfSSjqp/o1ROSjfIetFlL9aMLCFArUYTSL+fKRAZWF39sr4hQFOv+4pFDdT8EU5uXaZzAz5tuxTRhpUgynYhOixgnYI2fItnUkc2+XNukMlPR8Ov1KHwarUJ+ASgycyzFr6rlwNl5gQsYVpMETJkBgAIRoBBBoE2ifkIgJExjJiLR5AxOQ5kJsQlTcqQOOjTCFhobSIjnPWszFpwrCHAlz9EBc5p2d7DobI0ep8rIUcrrfHG3B2FYbbqoK9hbuv17UN11pAP+gONuMgGn57OzSI3QrcqHpRMtKhe9hZPW/W40eiye1d2WPFXk67nkPdJ5J3FwJYzKYvne6LFJ7a6OagYWQ6flO0sK7lT+zeRnl6czQHTC98G45iV2Qobz8nN0/uiVPeWtIZfrcJqaDlKjWWhzONRPg6ZkhFObT7a9ssiQV596A5AB4PSzuWOEqbWmLe7wUX6ueXrKi2T4ZunJMHmJMx1ykUjsNvEy+Mxd9PV5WVhWiTFgKj9TL2opFtNO4mec96/uytgR25Rc8ZAYH4TOWd/e6LLrjOiDJrKQgJch9z+LWiYzuZh+OGjZ6VsspDeqMiapm87E2YbYIw4QdaIP6+/zfw9/5JHPKGdHZjQiVJfLpzgeS2EgYy+qzwyg7ggUkhEcBVSUnD/oYcNKqDTaCpOeCWRpHnG36A6iGPaACxo1FJtDCq3UDjOQCob8RfvnPaddscTqz/AU4RhDuD3uL4ATHkt3/QbPXzTpvkPCidXXHpTtzMKCTqy6L84Wv2c6F6YpU0o+NlR2mQJo5ce32HoPmd6dOzfFh5SsGIKvUwTx+bHccnb/GY9ffh25MVSR+DHeEbSE2ir8afwrpC7uj23GeTWLMB0O3cx4z+pQJ0GkvQywYZE2fs6lFsUp45n8vBdXgCezOliLAGcmb7rSjJVpmukOULqKsUpQ5z0wfzw08rzY0405Lif3KQ+nWbvCMO0UXxV7cCHhE+KvCuNpSriYemBqy3MqMnkYnsWrPoW6kpg/rJdA5fb4exCzyyDSHs0mdMca3tDAVMOHk8d42GdQRzd+8AT6VwQArKDQ4GIqudTQgVVqJdj+cvM/4g7R1LfCBxf03cXhNf2K/MnVZ1d1l/Uv1nZOzQBe49996KmAWpNviEEKl4p2rHIbBRT/B6QoVmreGwqzbQ50OW8+TGOQjb+4BcMR0Jm0HhGfl+ur2gaCbDSipD8EotGJPPVvQ7J+IR2W/h2IrLz9kPmHsAGmryHIFHRG2ENf9GSoUbryBdvPZgiRWoq8s6ypNEH7LgpMRynTatQQ8lxTlcRvV8ayO36Y16m8dA2bggmaPg7RMJIXCZmhLIie1YbziAaCFwsMDI1j0krLYo4wbr0LKBK74K41EWGtdxdxIWuU+IQAnhRR6G+Q94yY2d8iA05Po9nMinaDTTrQIoGIq5jhSUteXzaP29RBu1Es2suL+KOLyHxpp9i1S70zpbhuUEjE0elPCIMmcZqCx7AKVMP9fFVPmnOaMpbREwV/8rW9QtRdNL2mCMmFqxL2EWmpJuwYS6cgWfcSY="
    ]

for data in base64_strings:
    decrypted_data = lena_privateloader_decrypt_http(data)
    if decrypted_data:
        try:
            print("Encrypted text:", data)
            print("Decrypted text:", decrypted_data.decode('utf-8'))
        except UnicodeDecodeError:
            print("Decrypted data might not be UTF-8 text or may be corrupted.")
